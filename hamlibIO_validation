#!/usr/bin/python3

########################################################################
########################################################################
####
#### Validate all functions and error detection in hamlibIO.py
####
########################################################################
########################################################################

####
#### Import support modules
####

import hamlibIO
import re
import sys

####
#### Global definitions
####

a_string = "test"
a_tuple = ("t", "e", "s", "t")
a_list = ["t", "e", "s", "t"]
a_dictonary = {"t":"e", "s":"t"}

#
#Simple exception to be used if error and halt
#
class hamlibIOvalidation(Exception):
    """
    Exception for hamlibIO_Validaton so we generate a stack trace and
    exit
    """
    pass

####
#### Test functions
####

def execute_function(function2test, args):

    test_call = "{}({})".format(function2test, args)
    try:
        return(None, eval(test_call))

    except Exception as ex:
        #
        #Exception, return exception string
        #
        return("{}{}".format(type(ex).__name__, ex.args), None)

def expected_noexception(function2test, args):

    (exception, data) = execute_function(function2test, args)

    if exception:
        #
        #Unexpected exception
        #
        print("""
ValidationError: Unexpected exception raised.
    {}
""".format(exception))
        return(True, data)
    #
    #Return True and data
    #
    return(False, data)

def expected_exception(function2test, args, bitbucket):

    (exception, data) = execute_function(function2test, args)

    if not exception:
        #
        #If it was supposed to cause an exception, report
        #
        print("""
ValidationError: Exception should have been generated.
    """)
        return False

    if re.match(r'hamlibIOerror', exception):
        #
        #Correct execption returned, return True
        #
        print("""
{}""".format(exception))
        return True

    #
    #Unexpected exception
    #
    print("""
ValidationError: Unexpected exception raised.
    {}
""".format(exception))
    #
    #Print error dividing line
    #
    return False

def expected_failure(function2test, args, bitbucket):

    (exception, data) = expected_noexception(function2test, args)

    if exception:
        #
        #Not expecting an excpetion
        #
        return(False)

    #
    #Error reported should be a string
    #
    if isinstance(data, str):
        if data:
            #
            #We got an non-blank string, as we should have. Print it out
            #and return True
            #
            print(data)
            return True
        else:
            #
            #Blank string returned, we expected something
            #
            print("""
ValidationError: Error should have been returned back from
    "{}" but it wasn't.
""".format(function2test))
            return False

    #
    #We didn't get a string type back from function, report error
    #
    print(data)
    print("""
ValidationError: "str" type should have been returned back from
    "{}" but it wasn't, "{}" was.
""".format(function2test, hamlibIO.type_xlate(type(data))))
    return False

def expected_success(function2test, args, bitbucket):

    (exception, data) = expected_noexception(function2test, args)

    if exception:
        #
        #Not expecting an excpetion
        #
        return(False)
    #
    #Should see a null string
    #
    if isinstance(data, str):
        if data:
            #
            #We should have gotten a null string back, but we didn't.
            #Report error.
            #
            print(data)
            print("""
ValidationError: No error should have been returned back from
    "{}" but it was.
""".format(function2test))
            return False
        else:
            #
            #Blank string returned, which is what we expected.
            #
            return True

    #
    #We didn't get a string type back from function, report error
    #
    print(data)
    print("""
ValidationError: "str" type should have been returned back from
    "{}" but it wasn't, "{}" was.
""".format(function2test, hamlibIO.type_xlate(type(data))))
    return False

def expected_data(function2test, args, data_expected):

    (exception, data) = expected_noexception(function2test, args)

    if exception:
        #
        #Not expecting an excpetion
        #
        return(False)

    expected_type = type(data_expected)

    #
    #Make sure we got back the expected data type and data value.
    #
    if isinstance(data, expected_type):
        if data == data_expected:
            #
            #Data returned is expected type and data
            #
            return True
        else:
            #
            #Data returned does not match expected data
            #
            print   ("""
ValidationError: Data returned does not match data expected.
""")
    else:
        #
        #Type returned does not match type expected
        #
        print("""
ValidationError: Expected type of data returned was "{}",
                 but type "{}" was returned instead.
""".format(hamlibIO.type_xlate(expected_type),
    hamlibIO.type_xlate(type(data))))

    #
    #Print expected and returned data
    #
    print("""
Expected data:
{}""".format(data_expected))

    print("""
Received data:
""".format(data))

    return False

#
#Tests are created in the order of the functions in hamlibIO. The three
#digit number at the front is to cause them to remain in the correct
#order when sorted and the tests run.
#
#After the "sort number" is the name of the function in hamlibIO to
#test. This will be extracted by this program and "eval'd" to call the
#function.
#
#The value of the dictonary entry is a tuple of tuples. First argument
#is the test routine to use, the second the argument(s) to pass to the
#function under test and the third, if present, is the return value
#expected, if any.
#
tests = {
    "010_type_xlate" :\
        (
        ("expected_exception", '"TEST"'), #Not a type
        ("expected_data", "type(None)", "None"),
        ("expected_data", "dict", "dict"),
        ),

    "020_validate_arg_type" :\
        (
        ("expected_exception", "a_string"),
        ("expected_exception", "[]"),
        ("expected_exception", "((a_string,))"),
        ("expected_exception", "(((a_string, str), ()))"),
        ("expected_exception", "((a_string, str, str),)"),
        ("expected_exception", "((a_string, a_string),)"),
        ),

    "030_Boolean" :\
        (
        ("expected_failure", '"X"'), #Not one of YyNn
        ("expected_success", '"Y"'),
        ("expected_success", '"y"'),
        ("expected_success", '"N"'),
        ("expected_success", '"n"'),
        ),

    "040_Digit" :\
        (
        ("expected_failure", '"X"'), #Non-numeric
        ("expected_success", '"0"'),
        ("expected_success", '"9"'),
        ),

    "050_Integer" :\
        (
        ("expected_failure", '"+17"'), #+ not allowed
        ("expected_failure", '"1d"'), #Non-numeric
        ("expected_success", '"17"'),
        ("expected_success", '"-17"'),
        ),

    "060_PositiveInteger" :\
        (
        ("expected_failure", '"0"'), #Not positive
        ("expected_failure", '"-17"'), #Not positive
        ("expected_failure", '"1d"'), #Non-numeric
        ("expected_success", '"17"'),
        ),

    "070_Number" :\
        (
        ("expected_failure", '"+17"'), # + not allowed
        ("expected_failure", '"."'), #No digits
        ("expected_failure", '"1d"'), #Non-numeric
        ("expected_success", '"0"'),
        ("expected_success", '"17"'),
        ("expected_success", '"-17"'),
        ("expected_success", '"17.17"'),
        ("expected_success", '"-.17"'),
        ("expected_success", '"-17.17"'),
        ),

    "080_Character" :\
        (
        ("expected_failure", '""'), #Zero length string
        ("expected_failure", '"17"'), #More than one character
        ("expected_failure", 'chr(ord(" ")-1)'), #0x1f
        ("expected_failure", 'chr(ord("~")+1)'), #0x7f
        ("expected_success", '" "'), #Bottom end of valid range
        ("expected_success", '"~"'), #Top end of valid range
        ),

    "090_String" :\
        (
        ("expected_failure", 'chr(ord(" ")-1)'), #0x1f
        ("expected_failure", 'chr(ord("~")+1)'), #0x7f
        ("expected_failure", '""'), #Zero length string
        ("expected_success", '" "'), #Bottom end of valid range
        ("expected_success", '"~"'), #Top end of valid range
        ),

    "100_TBS" :\
        (
        ("expected_success", '"Ignored"'),
        ),

    "110_Region" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"AI"'),
        ("expected_success", '"ai"'),
        ),

    "120_AwardList" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"DXCC"'),
        ("expected_success", '"dxcc"'),
        ),

    "130_SponsoredAwardList" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"ARRL_"'),
        ("expected_success", '"arrl_"'),
        ),

    "140_MultilineString" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"TEST"'),
        ),

    "150_Date" :\
        (
        ("expected_failure", '"1956"'),
        ("expected_failure", '"20220000"'),
        ("expected_failure", '"20220100"'),
        ("expected_failure", '"20221332"'),
        ("expected_failure", '"20220229"'),
        ("expected_failure", '"20221032"'),
        ("expected_success", '"20221030"'),
        ),

    "160_Time" :\
        (
        ("expected_failure", '"ABCDEF"'),
        ("expected_failure", '"00"'),
        ("expected_failure", '"00000000"'),
        ("expected_failure", '"2400"'),
        ("expected_failure", '"2360"'),
        ("expected_failure", '"240000"'),
        ("expected_failure", '"236000"'),
        ("expected_failure", '"230060"'),
        ("expected_failure", '"236060"'),
        ("expected_failure", '"246060"'),
        ("expected_success", '"0000"'),
        ("expected_success", '"2359"'),
        ("expected_success", '"000000"'),
        ("expected_success", '"235959"'),
        ),

    "170_Ant_Path" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"O"'),
        ),

    "180_Location" :\
        (
        ("expected_failure", '"W90 00.000"'),
        ("expected_failure", '"W090 0.000"'),
        ("expected_failure", '"W090 00.00"'),
        ("expected_failure", '"A000 00.000"'),
        ("expected_failure", '"W181 60.000"'),
        ("expected_failure", '"W180 01.000"'),
        ("expected_failure", '"W180 00.001"'),
        ("expected_success", '"N000 00.000"'),
        ("expected_success", '"S180 00.000"'),
        ("expected_success", '"E000 00.000"'),
        ("expected_success", '"W180 00.000"'),
        ),

    #Note that "Longitude" uses "Location" so no need to repeat those
    #tests.
    "190_Longitude" :\
        (
        ("expected_failure", '"N000 00.000"'),
        ("expected_success", '"E000 00.000"'),
        ("expected_success", '"W180 00.000"'),
        ),

    #Note that "Latitude" uses "Location" so no need to repeat those
    #tests.
    "200_Latitude" :\
        (
        ("expected_failure", '"W000 00.000"'),
        ("expected_failure", '"N091 00.000"'),
        ("expected_failure", '"S090 01.000"'),
        ("expected_failure", '"N090 00.001"'),
        ("expected_success", '"N000 00.000"'),
        ("expected_success", '"S090 00.000"'),
        ),

    "210_GridSquare" :\
        (
        ("expected_failure", '"00"'),
        ("expected_failure", '"AS"'),
        ("expected_failure", '"AABB"'),
        ("expected_failure", '"AA00AY"'),
        ("expected_failure", '"XX99YY00"'),
        ("expected_failure", '"SSAAYYBB"'),
        ("expected_success", '"AA"'),
        ("expected_success", '"AA00"'),
        ("expected_success", '"AA00AA"'),
        ("expected_success", '"rr99xx99"'),
        ),

    "220_GridSquareList" :\
        (
        ("expected_failure", '"AA, BB"'),
        ("expected_success", '"AA"'),
        ("expected_success", '"AA,rr"'),
        ),

    "230_Arrl_Sect" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"CO"'),
        ("expected_success", '"vt"'),
        ),

    "240_Band" :\
        (
        ("expected_failure", '"0M"'),
        ("expected_success", '"1.25M"'),
        ("expected_success", '"630m"'),
        ),

    "250_QSO_Upload_Status" :\
        (
        ("expected_failure", '"X"'),
        ("expected_success", '"M"'),
        ("expected_success", '"y"'),
        ),

    "260_Continent" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"AF"'),
        ("expected_success", '"oc"'),
        ),

    "270_Contest" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"ARRL-10-GHZ"'),
        ("expected_success", '"wfd"'),
        ),

    "280_CreditList" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_failure", '"TEST:TEST"'),
        ("expected_failure", '"WAS_SATELLITE:"'),
        ("expected_failure", '"WAS_SATELLITE:&"'),
        ("expected_failure", '"WAS_SATELLITE:TEST"'),
        ("expected_failure", '"WAS_SATELLITE:LOTW&TEST"'),
        ("expected_success", '"CQWPX"'),
        ("expected_success", '"WAS_SATELLITE:CARD"'),
        ("expected_success", '"WAS_SATELLITE:CARD&LOTW"'),
        ),

    "290_Dxcc" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"291"'),
        ),

    "300_QSL_Rcvd" :\
        (
        ("expected_failure", '"T"'),
        ("expected_success", '"Y"'),
        ),

    "310_QSL_Sent" :\
        (
        ("expected_failure", '"T"'),
        ("expected_success", '"Y"'),
        ),

    "320_QSL_Via" :\
        (
        ("expected_failure", '"T"'),
        ("expected_success", '"D"'),
        ),

    "330_Mode" :\
        (
        ("expected_failure", '"TEST"'),
        ("expected_success", '"SSB"'),
        ),

    "340_WWFFRef" :\
        (
        ("expected_failure", '"AFF-000"'),
        ("expected_failure", '"AFF-00000"'),
        ("expected_success", '"AFF-0000"'),
        ("expected_success", '"ABFF-0000"'),
        ("expected_success", '"ABCFF-0000"'),
        ("expected_success", '"abcdFF-9999"'),
        ),

    "500_userdef" :\
        (
        ("expected_failure", '"USERDEF"'),
        ("expected_failure", '"USERDEF0"'),
        ("expected_failure", '"USERDEFX"'),
        ("expected_success", '"USERDEF1"'),
        ),

    "510_dictonary_duplicates" :\
        (
        ("expected_failure", '{"AA":4, "aa":8}'),
        ("expected_success", '{"AA":4, "BB":8}'),
        ),

    "520_get_data_type_indicator" :\
        (
        ("expected_data", 'hamlibIO.record_fields["ANT_AZ"]', "N"),
        ("expected_data", 'hamlibIO.record_fields["BAND"]', "E"),
        ),

    "530_valid_callsign" :\
        (
        ("expected_failure", '"K0RLO/mobile"'),
        ("expected_success", '"JY1"'),
        ("expected_success", '"K0RLO"'),
        ("expected_success", '"W1JU"'),
        ("expected_success", '"VE7XYZ"'),
        ("expected_success", '"K0RLO/mobile", slash=True'),
        ),

    "540_field" :\
        (
        ("expected_data", '"FOO", "BAR"', "<FOO:3>BAR"),
        ("expected_data", '"FOO", "BAR", "S"', "<FOO:3:S>BAR"),
        ),

    "550_validate_field" :\
        (
        ("expected_failure", 'hamlibIO.record_fields, "TEST", "0"'),
        ("expected_failure", 'hamlibIO.record_fields, "CQZ", "0"'),
        ("expected_failure", 'hamlibIO.record_fields, "HRDLOG_QSO_UPLOAD_STATUS", "TEST"'),
        ("expected_failure", 'hamlibIO.record_fields, "CREDIT_SUBMITTED", "TEST1,TEST2"'),
        ("expected_failure", 'hamlibIO.record_fields, "CREDIT_SUBMITTED", "CQDX_QRP:TEST"'),
        ("expected_failure", 'hamlibIO.record_fields, "CREDIT_SUBMITTED", "CQDX_QRP:LOTW&TEST"'),
        ("expected_success", 'hamlibIO.record_fields, "HRDLOG_QSO_UPLOAD_STATUS", "N"'),
        ("expected_success", 'hamlibIO.record_fields, "CQZ", "17"'),
        ("expected_success", 'hamlibIO.record_fields, "CREDIT_SUBMITTED", "CQDXFIELD_SATELLITE"'),
        ("expected_success", 'hamlibIO.record_fields, "CREDIT_SUBMITTED", "DXCC,USACA"'),
        ("expected_success", 'hamlibIO.record_fields, "CREDIT_SUBMITTED", "DXCC,CQDX_QRP:LOTW&CARD"'),
        ),

    "560_ADIF_record" :\
        (
        ("expected_exception", '{"TEST" : "TEST"}'),
        ("expected_exception", '{"HRDLOG_QSO_UPLOAD_STATUS" : "TEST"}'),
        ("expected_exception", '{"CREDIT_SUBMITTED" : "CQDX_QRP:LOTW&TEST"}'),
        ("expected_exception", '{"HRDLOG_QSO_UPLOAD_STATUS" : "N", "hRDLOG_QSO_UPLOAD_STATUS" : "Y"}'),
        ),
    }

total = 0
total_errors = []
for key, arguments in sorted(tests.items()):
    #
    #Extract the function name to test from key
    #
    match = re.findall(r'^(\d{3})_(\S+)$', key)
    if not match:
        #
        #No match, this is a hamlibIO_validation error, throw exception
        #and exit.
        #
        msg = """test name "{}" not in correct format of NNN_function_name.""".format(key)
        raise hamlibIOvalidation(msg)

    (sort_num, function) = match[0]

    #
    #Build the name of the function to test in the hamlibIO module.
    #
    function_under_test = "hamlibIO." + function

    if not callable(eval(function_under_test)):
        #
        #The function name to test is not callable, throw exception
        #
        msg = """Function "{}" not callable, cannot test.""".format(function_under_test)
        raise hamlibIOvalidation(msg)

    subtest = 0
    for test_args in arguments:
        total += 1
        subtest += 1
        #
        #Build the full call to the testing function except for the
        #data to compare against (if any) and leave off the closing )
        #for printing purposes (we don't want to print expected data in
        #case it's long and complex)
        #
        test_call = "{}( {}( {} )".format(test_args[0],
            "hamlibIO." + function,
            test_args[1])

        #
        #Print the test call (without expected data) for logging purposes
        #
        test_number = "{}-{}".format(sort_num, subtest)
        print("""
Test {} - {}: {}( {} )
""".format(test_number, test_args[0], function_under_test, test_args[1]))

        #
        #Always pass a third argument even if no expected data, None if
        #no expected data
        #
        if len(test_args) < 3:
            data_expected = None
        else:
            data_expected = test_args[2]

        #
        #Execute the test function which will call the function under
        #test.
        #
        if eval(test_args[0])(function_under_test, test_args[1], data_expected):
            print(80 * "." + "\n")
        else:
            print(80 * "X" + "\n")
            total_errors.append(test_number)

#
#Print out failed tests, if any.
#
print("{} tests run".format(total))
failed_tests = ", ".join(total_errors)
if failed_tests:
    print("Failed test numbers: " + failed_tests)
else:
    print("No failed tests")

exit()
